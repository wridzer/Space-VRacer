//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/ShipControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ShipControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ShipControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ShipControls"",
    ""maps"": [
        {
            ""name"": ""Movement"",
            ""id"": ""3ccfe4b9-8f90-42c2-8080-42854b075c1a"",
            ""actions"": [
                {
                    ""name"": ""Thrusters LR"",
                    ""type"": ""Button"",
                    ""id"": ""60e086ef-81b6-441c-bfd5-b514cb0c5147"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Thrusters UD"",
                    ""type"": ""Button"",
                    ""id"": ""59a805ea-54c6-4e0e-87f2-675de677a6cb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Yaw"",
                    ""type"": ""Button"",
                    ""id"": ""034e6f33-d29f-4520-87f5-8715907ddd67"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pitch"",
                    ""type"": ""Button"",
                    ""id"": ""89ccb185-7336-4c1b-a419-68d0dfc93e0a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Roll"",
                    ""type"": ""Button"",
                    ""id"": ""5d83d97f-57b5-4fba-995b-cccfbe6525e6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Release"",
                    ""type"": ""Button"",
                    ""id"": ""6d30370c-4dfe-41c8-8261-4096d32b1e5d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=1)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Rollmode"",
                    ""type"": ""Button"",
                    ""id"": ""2fb2ce7b-0f82-44ce-b741-1155c45a44ee"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Throttle/Brake"",
                    ""type"": ""Button"",
                    ""id"": ""a0061e20-eb70-4cce-bc18-3c5855789227"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""824ddd2e-f78d-4e11-941b-66b3c9301070"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Release"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e377d047-1572-4c9c-ba44-cf81998b970b"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Release"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""521e7a1f-f23e-4d0d-874b-fe3ab048d131"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rollmode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""37d6f723-3ba8-4ee4-9b97-763076bcab27"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rollmode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0f675715-46f3-4a0e-a6e9-eda2cad09b1a"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rollmode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Controller"",
                    ""id"": ""e97c3c0c-b20f-4be1-9cb4-4a16e5acc783"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Throttle/Brake"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""dfd4a073-5a68-4f9a-b305-cf4e26e6ee4e"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Throttle/Brake"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""358820d8-f7c6-4e44-ab91-74a31387023e"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Throttle/Brake"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""481d7644-6714-4ae1-9f30-7981ff345bcd"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Throttle/Brake"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""60fb1704-8c49-4a7c-aa1b-46efbb710193"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Throttle/Brake"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""6c39cfbd-47b3-4f61-b8b7-8afe9c10cb18"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Throttle/Brake"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Controller"",
                    ""id"": ""6d2aad8a-71a9-46ab-9395-26490791a918"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Thrusters LR"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""bc5bdc8e-916d-44e0-9c00-8817b25d7bca"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Thrusters LR"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""e04cba39-571c-467b-849b-ef9465654464"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Thrusters LR"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""c159275f-6b56-4993-8e1b-440b318a1ee4"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Thrusters LR"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""d0579eee-1086-4228-bc38-1c89e6cb7192"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Thrusters LR"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""1c287e11-6da1-4e79-a1e3-309c9e977f99"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Thrusters LR"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Controller"",
                    ""id"": ""1582d992-ec52-4c4f-b46f-5250e446f177"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Thrusters UD"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""857892b1-c2dc-4a98-90fc-18af09cf1d38"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Thrusters UD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""34846621-d321-40f5-a86a-67a6f575a967"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Thrusters UD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""ac3edb51-753c-45a2-abdd-ccdc929e54f4"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Thrusters UD"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""0a48da37-4d32-4d97-a7bc-8e6a4a234cd6"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Thrusters UD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""a8d0f760-e979-4c96-86f1-89d0e102d9b0"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Thrusters UD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Controller"",
                    ""id"": ""9831574a-465b-440c-8e97-64cb24f09171"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Yaw"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""e7a505a3-2fd1-4db5-a0f7-a9a61b4da21d"",
                    ""path"": ""<Gamepad>/rightStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Yaw"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""976acfc0-d8d1-42e8-bbec-54d57f07f84c"",
                    ""path"": ""<Gamepad>/rightStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Yaw"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Mouse"",
                    ""id"": ""9377a75c-ee84-43dd-8e3b-9d3b13822442"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Yaw"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""6113f08d-2b1e-44f5-bdab-ebd3caee4ffb"",
                    ""path"": ""<Mouse>/position/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Yaw"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Controller"",
                    ""id"": ""c3e1ffe6-5abc-4e92-86e8-d9c2077912bf"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": ""Invert"",
                    ""groups"": """",
                    ""action"": ""Pitch"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""ac376ef6-937f-4e92-8d7e-40d5d307c83e"",
                    ""path"": ""<Gamepad>/rightStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pitch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""97d54eb1-0b8a-4a05-b023-658354898250"",
                    ""path"": ""<Gamepad>/rightStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pitch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Mouse"",
                    ""id"": ""0b849ba8-a55a-4728-af99-4c39bffd3b6e"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": ""Invert"",
                    ""groups"": """",
                    ""action"": ""Pitch"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""ccbfc6d9-cf33-4d49-880b-761794d660c5"",
                    ""path"": ""<Mouse>/position/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pitch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""42a49ebb-8da6-4fe5-9ffa-764fc0fd11d1"",
                    ""path"": ""<Mouse>/position/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pitch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Main Controls"",
            ""bindingGroup"": ""Main Controls"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": true,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": true,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Movement
        m_Movement = asset.FindActionMap("Movement", throwIfNotFound: true);
        m_Movement_ThrustersLR = m_Movement.FindAction("Thrusters LR", throwIfNotFound: true);
        m_Movement_ThrustersUD = m_Movement.FindAction("Thrusters UD", throwIfNotFound: true);
        m_Movement_Yaw = m_Movement.FindAction("Yaw", throwIfNotFound: true);
        m_Movement_Pitch = m_Movement.FindAction("Pitch", throwIfNotFound: true);
        m_Movement_Roll = m_Movement.FindAction("Roll", throwIfNotFound: true);
        m_Movement_Release = m_Movement.FindAction("Release", throwIfNotFound: true);
        m_Movement_Rollmode = m_Movement.FindAction("Rollmode", throwIfNotFound: true);
        m_Movement_ThrottleBrake = m_Movement.FindAction("Throttle/Brake", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Movement
    private readonly InputActionMap m_Movement;
    private IMovementActions m_MovementActionsCallbackInterface;
    private readonly InputAction m_Movement_ThrustersLR;
    private readonly InputAction m_Movement_ThrustersUD;
    private readonly InputAction m_Movement_Yaw;
    private readonly InputAction m_Movement_Pitch;
    private readonly InputAction m_Movement_Roll;
    private readonly InputAction m_Movement_Release;
    private readonly InputAction m_Movement_Rollmode;
    private readonly InputAction m_Movement_ThrottleBrake;
    public struct MovementActions
    {
        private @ShipControls m_Wrapper;
        public MovementActions(@ShipControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @ThrustersLR => m_Wrapper.m_Movement_ThrustersLR;
        public InputAction @ThrustersUD => m_Wrapper.m_Movement_ThrustersUD;
        public InputAction @Yaw => m_Wrapper.m_Movement_Yaw;
        public InputAction @Pitch => m_Wrapper.m_Movement_Pitch;
        public InputAction @Roll => m_Wrapper.m_Movement_Roll;
        public InputAction @Release => m_Wrapper.m_Movement_Release;
        public InputAction @Rollmode => m_Wrapper.m_Movement_Rollmode;
        public InputAction @ThrottleBrake => m_Wrapper.m_Movement_ThrottleBrake;
        public InputActionMap Get() { return m_Wrapper.m_Movement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementActions set) { return set.Get(); }
        public void SetCallbacks(IMovementActions instance)
        {
            if (m_Wrapper.m_MovementActionsCallbackInterface != null)
            {
                @ThrustersLR.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnThrustersLR;
                @ThrustersLR.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnThrustersLR;
                @ThrustersLR.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnThrustersLR;
                @ThrustersUD.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnThrustersUD;
                @ThrustersUD.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnThrustersUD;
                @ThrustersUD.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnThrustersUD;
                @Yaw.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnYaw;
                @Yaw.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnYaw;
                @Yaw.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnYaw;
                @Pitch.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnPitch;
                @Pitch.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnPitch;
                @Pitch.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnPitch;
                @Roll.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnRoll;
                @Roll.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnRoll;
                @Roll.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnRoll;
                @Release.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnRelease;
                @Release.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnRelease;
                @Release.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnRelease;
                @Rollmode.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnRollmode;
                @Rollmode.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnRollmode;
                @Rollmode.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnRollmode;
                @ThrottleBrake.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnThrottleBrake;
                @ThrottleBrake.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnThrottleBrake;
                @ThrottleBrake.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnThrottleBrake;
            }
            m_Wrapper.m_MovementActionsCallbackInterface = instance;
            if (instance != null)
            {
                @ThrustersLR.started += instance.OnThrustersLR;
                @ThrustersLR.performed += instance.OnThrustersLR;
                @ThrustersLR.canceled += instance.OnThrustersLR;
                @ThrustersUD.started += instance.OnThrustersUD;
                @ThrustersUD.performed += instance.OnThrustersUD;
                @ThrustersUD.canceled += instance.OnThrustersUD;
                @Yaw.started += instance.OnYaw;
                @Yaw.performed += instance.OnYaw;
                @Yaw.canceled += instance.OnYaw;
                @Pitch.started += instance.OnPitch;
                @Pitch.performed += instance.OnPitch;
                @Pitch.canceled += instance.OnPitch;
                @Roll.started += instance.OnRoll;
                @Roll.performed += instance.OnRoll;
                @Roll.canceled += instance.OnRoll;
                @Release.started += instance.OnRelease;
                @Release.performed += instance.OnRelease;
                @Release.canceled += instance.OnRelease;
                @Rollmode.started += instance.OnRollmode;
                @Rollmode.performed += instance.OnRollmode;
                @Rollmode.canceled += instance.OnRollmode;
                @ThrottleBrake.started += instance.OnThrottleBrake;
                @ThrottleBrake.performed += instance.OnThrottleBrake;
                @ThrottleBrake.canceled += instance.OnThrottleBrake;
            }
        }
    }
    public MovementActions @Movement => new MovementActions(this);
    private int m_MainControlsSchemeIndex = -1;
    public InputControlScheme MainControlsScheme
    {
        get
        {
            if (m_MainControlsSchemeIndex == -1) m_MainControlsSchemeIndex = asset.FindControlSchemeIndex("Main Controls");
            return asset.controlSchemes[m_MainControlsSchemeIndex];
        }
    }
    public interface IMovementActions
    {
        void OnThrustersLR(InputAction.CallbackContext context);
        void OnThrustersUD(InputAction.CallbackContext context);
        void OnYaw(InputAction.CallbackContext context);
        void OnPitch(InputAction.CallbackContext context);
        void OnRoll(InputAction.CallbackContext context);
        void OnRelease(InputAction.CallbackContext context);
        void OnRollmode(InputAction.CallbackContext context);
        void OnThrottleBrake(InputAction.CallbackContext context);
    }
}
